
<div id="elementMenu" class="span4">
    <h3>I'm only draggable (I clone) </h3>
    <ol class="simple_with_no_drop vertical">
      <li class="highlight">
          <i class="icon-move"></i>
          Item 1
        </li>
        <li class="highlight">
          <i class="icon-move"></i>
          Item 2
        </li>
        <li class="highlight">
          <i class="icon-move"></i>
          Item 3
        </li>
    </ol>
</div>

<div id="trashcan">
    <h3>I'm only droppable (trash can?)</h3>
    <ol class="simple_with_no_drag vertical">
      <li>
          <i class="icon-move"></i>
          <span contenteditable="true">Item 1</span>
        </li>
        <li>
          <i class="icon-move"></i>
          Item 2
        </li>
        <li>
          <i class="icon-move"></i>
          Item 3
        </li>
    </ol>
  </div>
</div>


<!--
.inEdit {outline: 1px green dashed; background-color: yellow;}

<p onDblClick="this.contentEditable=true;this.className='inEdit';" onblur="this.contentEditable=false;this.className='';">This paragraph uses some simple script to be editable. Double-click the text to begin editing.</p>

  
Sort handle and limited drag/drop

$("ol.simple_with_drop").sortable({
  group: 'no-drop',
  handle: 'i.icon-move',
  onDragStart: function (item, container, _super) {
    // Duplicate items of the no drop area
    if(!container.options.drop)
      item.clone().insertAfter(item)
    _super(item)
  }
})
$("ol.simple_with_no_drop").sortable({
  group: 'no-drop',
  drop: false
})
$("ol.simple_with_no_drag").sortable({
  group: 'no-drop',
  drag: false
})


Connected lists with limited drop targets
var group = $("ol.limited_drop_targets").sortable({
  group: 'limited_drop_targets',
  isValidTarget: function  (item, container) {
    if(item.is(".highlight"))
      return true
    else {
      return item.parent("ol")[0] == container.el[0]
    }
  },
  onDrop: function (item, container, _super) {
    $('#serialize_output').text(group.sortable("serialize").get().join("\n"))
    _super(item, container)
  },
  serialize: function (parent, children, isContainer) {
    return isContainer ? children.join() : parent.text()
  }
})
-->